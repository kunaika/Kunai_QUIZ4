trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  artifactName: 'MyAppArtifact'
  qaPort: '5001'
  stagingPort: '5002'
  prodPort: '5003'

stages:
- stage: Deliver
  displayName: 'Deliver Stage'
  jobs:
  - job: DeliverJob
    displayName: 'Build and Package'
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet packages'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'
        configuration: $(buildConfiguration)

    - task: DotNetCoreCLI@2
      displayName: 'Build Project'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration)'
        publishWebProjects: false
        workingDirectory: ''

    - task: DotNetCoreCLI@2
      displayName: 'Publish Project'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: '$(artifactName)'
        publishLocation: 'Container'

- stage: Deploy_to_QA
  displayName: 'Deploy to QA Environment'
  dependsOn: Deliver
  condition: succeeded()
  jobs:
  - job: DeployJob
    displayName: 'Deploy to QA'
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: '$(artifactName)'

    - task: AzureWebApp@1
      displayName: 'Deploy to QA App Service'
      inputs:
        azureSubscription: '<Your Azure Subscription>'
        appType: 'webApp'
        appName: '<Your QA App Service Name>'
        packageForLinux: '$(Pipeline.Workspace)/$(artifactName)/**/*'
        startupCommand: 'dotnet <YourAppName>.dll --urls http://*:$(qaPort)'

- stage: Deploy_to_Staging
  displayName: 'Deploy to Staging Environment'
  dependsOn: Deploy_to_QA
  condition: succeeded()
  jobs:
  - job: DeployJob
    displayName: 'Deploy to Staging'
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: '$(artifactName)'

    - task: AzureWebApp@1
      displayName: 'Deploy to Staging App Service'
      inputs:
        azureSubscription: '<Your Azure Subscription>'
        appType: 'webApp'
        appName: '<Your Staging App Service Name>'
        packageForLinux: '$(Pipeline.Workspace)/$(artifactName)/**/*'
        startupCommand: 'dotnet <YourAppName>.dll --urls http://*:$(stagingPort)'

- stage: Deploy_to_Production
  displayName: 'Deploy to Production Environment'
  dependsOn: Deploy_to_Staging
  condition: succeeded()
  jobs:
  - job: DeployJob
    displayName: 'Deploy to Production'
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: '$(artifactName)'

    - task: AzureWebApp@1
      displayName: 'Deploy to Production App Service'
      inputs:
        azureSubscription: '<Your Azure Subscription>'
        appType: 'webApp'
        appName: '<Your Production App Service Name>'
        packageForLinux: '$(Pipeline.Workspace)/$(artifactName)/**/*'
        startupCommand: 'dotnet <YourAppName>.dll --urls http://*:$(prodPort)'